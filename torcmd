#!/usr/bin/env python
"""Routes traffic from a given address to Tor

   Copyright 2015 Sean Whalen
   Copyright 2015 Jacob Gajek

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Modified by Marirs <marirs@gmail.com> 
"""

import argparse
import socket
import os

SOCKFILE = "/var/run/routetord/routetord.sock"
PIDFILE = "/var/run/routetord/routetord.pid"

def get_pid():
    try:
        pf = open(PIDFILE, 'r')
        pid = int(pf.read().strip())
        pf.close()
    except IOError:
        pid = None
    except SystemExit:
        pid = None
    return pid

def is_running():
    pid = get_pid()

    if pid is None:
        print('routetord is stopped')
        return False
    elif os.path.exists('/proc/%d' % pid):
        return True
    else:
        print('routetord (pid %d) is killed' % pid)
        return False


argparser = argparse.ArgumentParser(description=__doc__)
argparser.add_argument("cmd", choices=['start', 'stop', 'list'])
argparser.add_argument("address", nargs=argparse.REMAINDER)
args = argparser.parse_args()

if args.cmd in ["list"]:
    msg = args.cmd
else:
    if len(args.address) != 1:
        exit('One and only one address is required.')
    msg = "{} {}".format(args.cmd, args.address[0])


if is_running():
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    sock.connect(SOCKFILE)
    try:
        sock.sendall(msg)
        # Look for the response
        print(sock.recv(1024))
    finally:
        sock.close()

